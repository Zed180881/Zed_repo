package ua.service.implementation;

import java.io.File;
import java.io.IOException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException;

import ua.entity.Category;
import ua.form.filter.CategoryFilter;
import ua.repository.CategoryRepository;
import ua.service.CategoryService;
import ua.service.implementation.specification.CategoryFilterSpecification;

@Service
@Transactional
public class CategoryServiceImpl implements CategoryService {
    private Category category;

    @Autowired
    private CategoryRepository categoryRepository; 

    @Override
    public void save(Category category) {
	categoryRepository.saveAndFlush(category);
	if (category.getFile() != null && !category.getFile().isEmpty()) {
	    int index = category.getFile().getOriginalFilename()
		    .lastIndexOf(".");
	    String extension = category.getFile().getOriginalFilename()
		    .substring(index);
	    String path = System.getProperty("catalina.home")
		    + "/images/category/";
	    File file = new File(path);
	    if (!file.exists())
		file.mkdirs();
	    file = new File(file, category.getId() + extension);
	    try {
		category.getFile().transferTo(file);
	    } catch (IllegalStateException | IOException e) {		
	    }
	    category.setPath(extension);
	    category.setVersion(category.getVersion() + 1);
	    categoryRepository.save(category);
	}
    }

    @Override
    @Transactional(readOnly = true)
    public Category findByCategoryName(String categoryName) {
	return categoryRepository.findByCategoryName(categoryName);
    }

    @Override
    public void deleteByCategoryName(String categoryName) {
	if ((category = categoryRepository.findByCategoryName(categoryName)) != null)
	    categoryRepository.delete(category);
    }

    @Override
    @Transactional(readOnly = true)
    public List<Category> findAll() {
	return categoryRepository.findAll();
    }

    @Override
    @Transactional(readOnly = true)
    public Category findOne(int id) {
	return categoryRepository.findOne(id);
    }

    @Override
    public void deleteById(int id) throws MySQLIntegrityConstraintViolationException {	
	categoryRepository.delete(id);
	}

    @Override
    @Transactional(readOnly = true)
    public Page<Category> findAll(Pageable pageable) {
	return categoryRepository.findAll(pageable);
    }

    @Override
    @Transactional(readOnly = true)
    public Page<Category> findAll(Pageable pageable, CategoryFilter filter) {
	return categoryRepository.findAll(new CategoryFilterSpecification(
		filter), pageable);
    }

}
