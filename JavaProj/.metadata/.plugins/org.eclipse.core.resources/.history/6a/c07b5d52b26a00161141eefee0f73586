package ua.service.implementation.specification;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Expression;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.domain.Specifications;

import ua.entity.Commodity;
import ua.entity.CommodityOrder;
import ua.form.filter.CommodityFilter;
import ua.form.filter.CommodityOrderFilter;

public class CommodityOrderFilterSpecification implements Specification<CommodityOrder> {

    private final CommodityOrderFilter filter;

    private final List<Specification<CommodityOrder>> list = new ArrayList<>();

    public CommodityOrderFilterSpecification(CommodityOrderFilter filter) {
	this.filter = filter;
    }    

    private void findByUserId() {
	if (filter.getUserId() > 0) {
	    list.add((root, cq, cb) -> root.get("user").in(
		    filter.getUserId()));
	}
    }

    private void findByOrderStatusId() {
	if (filter.getOrderStatusId() > 0) {
	    list.add((root, cq, cb) -> root.get("orderStatus").in(
		    filter.getOrderStatusId()));
	}
    }

    private void findByCommodityId() {
	if (filter.getCommodityId() > 0) {
	    list.add((root, cq, cb) -> root.get("commodities").in(
		    filter.getCommodityId()));
	}
    }   

    private void findByMaxMinSum() {
	if (filter.getMaxSum() > 0 && filter.getMinSum() > 0) {
	    list.add((root, cq, cb) -> {
		Expression<Double> exp = root.get("sum");
		return cb.between(exp, filter.getMinSum(),
			filter.getMaxSum());
	    });
	} else if (filter.getMaxSum() > 0) {
	    list.add((root, cq, cb) -> {
		Expression<Double> exp = root.get("sum");
		return cb.lessThan(exp, filter.getMaxSum());
	    });
	} else if (filter.getMinSum() > 0) {
	    list.add((root, cq, cb) -> {
		Expression<Double> exp = root.get("sum");
		return cb.greaterThan(exp, filter.getMinSum());
	    });
	}
    }

    private void findByMaxMinWarranty() {
	if (filter.getMaxWarranty() > 0 && filter.getMinWarranty() > 0) {
	    list.add((root, cq, cb) -> {
		Expression<Integer> exp = root.get("warranty");
		return cb.between(exp, filter.getMinWarranty(),
			filter.getMaxWarranty());
	    });
	} else if (filter.getMaxWarranty() > 0) {
	    list.add((root, cq, cb) -> {
		Expression<Integer> exp = root.get("warranty");
		return cb.lessThan(exp, filter.getMaxWarranty());
	    });
	} else if (filter.getMinWarranty() > 0) {
	    list.add((root, cq, cb) -> {
		Expression<Integer> exp = root.get("warranty");
		return cb.greaterThan(exp, filter.getMinWarranty());
	    });
	}
    }

    @Override
    public Predicate toPredicate(Root<CommodityOrder> root, CriteriaQuery<?> query,
	    CriteriaBuilder cb) {
	query.distinct(true);
	if (filter != null) {
	    findByModel();
	    findByCategoryId();
	    findByProducerId();
	    findByCommodityStatusId();
	    findByMaxMinQuantity();
	    findByMaxMinPrice();
	    findByMaxMinWarranty();
	}
	if (list.size() == 0)
	    return null;
	Specifications<CommodityOrder> spec = Specifications.where(list.get(0));
	for (int i = 1; i < list.size(); i++) {
	    spec = spec.and(list.get(i));
	}
	return spec.toPredicate(root, query, cb);
    }

}
