package ua.service.implementation;

import java.io.File;
import java.io.IOException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import ua.entity.Commodity;
import ua.entity.CommodityOrder;
import ua.entity.User;
import ua.form.CommodityForm;
import ua.form.filter.CommodityFilter;
import ua.repository.CategoryRepository;
import ua.repository.CommodityOrderRepository;
import ua.repository.CommodityRepository;
import ua.repository.CommodityStatusRepository;
import ua.repository.ProducerRepository;
import ua.service.CommodityService;
import ua.service.implementation.specification.CommodityFilterSpecification;

@Service
@Transactional
public class CommodityServiceImpl implements CommodityService {

    private Commodity commodity;

    @Autowired
    private CommodityRepository commodityRepository;

    @Autowired
    private CategoryRepository categoryRepository;

    @Autowired
    private ProducerRepository producerRepository;

    @Autowired
    private CommodityStatusRepository commodityStatusRepository;
    
    @Autowired
    private CommodityOrderRepository commodityOrderRepository;

    @Override
    public void save(CommodityForm commodityForm) {
	commodity = new Commodity();
	commodity.setId(commodityForm.getId());
	commodity.setModel(commodityForm.getModel());
	commodity.setDescription(commodityForm.getDescription());
	commodity.setCategory(commodityForm.getCategory());
	commodity.setCommodityStatus(commodityForm.getCommodityStatus());
	commodity.setPrice(Double.valueOf(commodityForm.getPrice()));
	commodity.setProducer(commodityForm.getProducer());
	commodity.setQuantity(Integer.valueOf(commodityForm.getQuantity()));
	commodity.setWarranty(Integer.valueOf(commodityForm.getWarranty()));
	commodity.setPath(commodityForm.getPath());
	commodity.setVersion(commodityForm.getVersion());
	commodityRepository.saveAndFlush(commodity);
	if (commodityForm.getFile() != null
		&& !commodityForm.getFile().isEmpty()) {
	    int index = commodityForm.getFile().getOriginalFilename()
		    .lastIndexOf(".");
	    String extension = commodityForm.getFile().getOriginalFilename()
		    .substring(index);
	    String path = System.getProperty("catalina.home")
		    + "/images/commodity/";
	    File file = new File(path);
	    if (!file.exists())
		file.mkdirs();
	    file = new File(file, commodity.getId() + extension);
	    try {
		commodityForm.getFile().transferTo(file);
		commodity.setPath(extension);
		commodity.setVersion(commodityForm.getVersion() + 1);
	    } catch (IllegalStateException | IOException e) {
	    }
	    commodityRepository.save(commodity);
	}
    }

    @Override
    @Transactional(readOnly = true)
    public Commodity findByCommodityModel(String commodityModel) {
	return commodityRepository.findByModel(commodityModel);
    }

    @Override
    public void deleteByCommodityModel(String commodityModel) {
	if ((commodity = commodityRepository.findByModel(commodityModel)) != null)
	    commodityRepository.delete(commodity);
    }

    @Override
    @Transactional(readOnly = true)
    public List<Commodity> findAll() {
	return commodityRepository.findAll();
    }

    @Override
    @Transactional(readOnly = true)
    public CommodityForm findOneForm(int id) {
	commodity = commodityRepository.findOne(id);
	CommodityForm commodityForm = new CommodityForm();
	commodityForm.setId(commodity.getId());
	commodityForm.setCategory(commodity.getCategory());
	commodityForm.setCommodityStatus(commodity.getCommodityStatus());
	commodityForm.setModel(commodity.getModel());
	commodityForm.setDescription(commodity.getDescription());
	commodityForm.setPrice(String.valueOf(commodity.getPrice()));
	commodityForm.setProducer(commodity.getProducer());
	commodityForm.setQuantity(String.valueOf(commodity.getQuantity()));
	commodityForm.setWarranty(String.valueOf(commodity.getWarranty()));
	commodityForm.setPath(commodity.getPath());
	commodityForm.setVersion(commodity.getVersion());
	return commodityForm;
    }

    @Override
    @Transactional(readOnly = true)
    public Commodity findOne(int id) {
	return commodityRepository.findOne(id);
    }

    @Override
    public void deleteById(int id) {
	commodityRepository.delete(id);
    }

    @Override
    @Transactional(readOnly = true)
    public Page<Commodity> findAll(Pageable pageable) {
	return commodityRepository.findAll(pageable);
    }

    @Override
    @Transactional(readOnly = true)
    public Page<Commodity> findAll(Pageable pageable, CommodityFilter filter) {	
	return commodityRepository.findAll(new CommodityFilterSpecification(filter), pageable);
    }

    @Override
    public void addToCart(int id, User user) {
	CommodityOrder cart = commodityOrderRepository.findNewByUserID(principal.getId())
	
    }    
}
