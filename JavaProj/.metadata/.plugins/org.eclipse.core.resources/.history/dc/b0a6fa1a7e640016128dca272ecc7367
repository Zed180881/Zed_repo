package ua.service.implementation.validators;

import org.springframework.validation.Errors;
import org.springframework.validation.ValidationUtils;
import org.springframework.validation.Validator;

import ua.entity.Commodity;
import ua.entity.User;
import ua.service.CommodityService;
import ua.service.UserService;

public class CommodityValidator implements Validator {

    private final CommodityService commodityService;

    public CommodityValidator(CommodityService commodityService) {
	this.commodityService = commodityService;
    }

    @Override
    public boolean supports(Class<?> arg0) {
	return Commodity.class.isAssignableFrom(arg0);
    }

    @Override
    public void validate(Object object, Errors errors) {
	Commodity commodity = (Commodity) object;
	ValidationUtils.rejectIfEmptyOrWhitespace(errors, "category", "",
		"Category cann't be empty");
	ValidationUtils.rejectIfEmptyOrWhitespace(errors, "model", "",
		"Model cann't be empty");
	ValidationUtils.rejectIfEmptyOrWhitespace(errors, "producer", "",
		"Producer cann't be empty");
	ValidationUtils.rejectIfEmptyOrWhitespace(errors, "quantity", "",
		"Quantity cann't be empty");
	ValidationUtils.rejectIfEmptyOrWhitespace(errors, "price", "",
		"Price cann't be empty");
	ValidationUtils.rejectIfEmptyOrWhitespace(errors, "commodityStatus",
		"", "Commodity status cann't be empty");
	ValidationUtils.rejectIfEmptyOrWhitespace(errors, "warranty", "",
		"Commodity status cann't be empty");

	if (!commodity.getModel().matches("[a-zA-Z 0-9]+"))
	    errors.rejectValue("model", "", "Illegal characters in model name");
	if (commodityService.findByCommodityModel(commodity.getModel()) != null
		&& commodityService.findByCommodityModel(commodity.getModel())
			.getId() != commodity.getId())
	    errors.rejectValue("model", "",
		    "Commodity with this model already exists");

	if (user.getLogin().length() < 5)
	    errors.rejectValue("login", "",
		    "User login can be at least 5 characters");
	if (!user.getLogin().matches("[a-zA-Z0-9]+"))
	    errors.rejectValue("login", "", "Illegal characters in user login");
	if (userService.findByUserLogin(user.getLogin()) != null
		&& userService.findByUserLogin(user.getLogin()).getId() != user
			.getId())
	    errors.rejectValue("login", "",
		    "User with this login already exists");

	if (user.getPassword().length() < 5)
	    errors.rejectValue("password", "",
		    "User password can be at least 5 characters");

	if (user.getMail().split("@").length != 2)
	    errors.rejectValue("mail", "", "Incorrect user mail");
	if (!user.getMail().matches("[a-zA-Z@.0-9]+"))
	    errors.rejectValue("mail", "", "Illegal characters in user mail");
	if (userService.findByUserMail(user.getMail()) != null
		&& userService.findByUserMail(user.getMail()).getId() != user
			.getId())
	    errors.rejectValue("mail", "", "User with this mail already exists");

	if (user.getPhone().length() != 12)
	    errors.rejectValue("phone", "",
		    "User phone must be 12 digits with country code");
	if (!user.getPhone().matches("[0-9]+"))
	    errors.rejectValue("phone", "",
		    "Incorrect phone. Must be digits only.");
    }

}
