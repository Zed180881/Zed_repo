package ua.service.implementation;

import java.text.SimpleDateFormat;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import ua.entity.Category;
import ua.entity.Commodity;
import ua.entity.CommodityOrder;
import ua.entity.CommodityStatus;
import ua.entity.OrderStatus;
import ua.entity.Producer;
import ua.entity.User;
import ua.repository.CategoryRepository;
import ua.repository.CommodityOrderRepository;
import ua.repository.CommodityRepository;
import ua.repository.CommodityStatusRepository;
import ua.repository.OrderStatusRepository;
import ua.repository.ProducerRepository;
import ua.repository.UserRepository;
import ua.service.CommodityOrderService;
import ua.service.CommodityService;

@Service
@Transactional
public class CommodityOrderServiceImpl implements CommodityOrderService {

    private SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy"); // 05.09.2015

    @Autowired
    private CommodityOrderRepository commodityOrderRepository;

    @Autowired
    private OrderStatusRepository orderStatusRepository;

    @Autowired
    private UserRepository userRepository;

    @Override
    public void save(String userName, String orderStatusName, String orderDate,
	    String payDate, String deliveryDate, String... commodities) {

	CommodityOrder commodityOrder = new CommodityOrder();
	User user = userRepository.findByFullName(userName);
	if (user != null)
	    commodityOrder.setUser(user);
	else {
	    System.out.println("User not found");
	    return;
	}
	OrderStatus orderStatus = orderStatusRepository
		.findByOrderStatusName(orderStatusName);
	if (orderStatus != null)
	    commodityOrder.setOrderStatus(orderStatus);
	else {
	    System.out.println("Order Status not found");
	    return;
	}

	commodityOrder.setOrderDate(sdf.parse(orderDate));
	commodityOrder.setPayDate(sdf.parse(payDate));
	commodityOrder.setDeliveryDate(sdf.parse(deliveryDate));

	CommodityStatus commodityStatus = commodityStatusRepository
		.findByCommodityStatusName(statusName);
	if (commodityStatus != null)
	    commodity.setCommodityStatus(commodityStatus);
	else {
	    System.out.println("Commodity Status not found");
	    return;
	}
	if (warranty >= 0)
	    commodity.setWarranty(warranty);
	else {
	    System.out.println("Invalid Warranty");
	    return;
	}
	if (!model.equals(""))
	    commodity.setModel(model);
	else {
	    System.out.println("Invalid ModelName");
	    return;
	}
	commodityRepository.save(commodity);

    }

    @Override
    public Commodity findByCommodityModel(String commodityModel) {
	return commodityRepository.findByModel(commodityModel);
    }

    @Override
    public void deleteByCommodityModel(String commodityModel) {
	if (commodityRepository.findByModel(commodityModel) != null)
	    commodityRepository.delete(findByCommodityModel(commodityModel));
    }

    @Override
    public List<Commodity> findAll() {
	return commodityRepository.findAll();
    }

    @Override
    public void updateCommodity(String commodityModel, String categoryName,
	    String model, String producerName, int quantity, double price,
	    String statusName, int warranty) {
	if (commodityRepository.findByModel(commodityModel) != null) {
	    Category category = categoryRepository
		    .findByCategoryName(categoryName);
	    if (category != null)
		commodityRepository.findByModel(commodityModel).setCategory(
			category);
	    Producer producer = producerRepository
		    .findByProducerName(producerName);
	    if (producer != null)
		commodityRepository.findByModel(commodityModel).setProducer(
			producer);
	    if (quantity >= 0)
		commodityRepository.findByModel(commodityModel).setQuantity(
			quantity);
	    if (price > 0)
		commodityRepository.findByModel(commodityModel).setPrice(price);
	    CommodityStatus commodityStatus = commodityStatusRepository
		    .findByCommodityStatusName(statusName);
	    if (commodityStatus != null)
		commodityRepository.findByModel(commodityModel)
			.setCommodityStatus(commodityStatus);
	    if (warranty >= 0)
		commodityRepository.findByModel(commodityModel).setWarranty(
			warranty);
	    if (!model.equals(""))
		commodityRepository.findByModel(commodityModel).setModel(model);
	}

    }

    @Override
    public List<CommodityOrder> findCommodityOrdersByCommodityModel(
	    String commodityModel) {
	return commodityRepository.findByModel(commodityModel)
		.getCommodityOrders();
    }

}
