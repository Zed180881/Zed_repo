package ua.controller;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import ua.entity.Category;
import ua.entity.Commodity;
import ua.entity.CommodityOrder;
import ua.entity.CommodityStatus;
import ua.entity.OrderStatus;
import ua.entity.Producer;
import ua.entity.User;
import ua.service.CategoryService;
import ua.service.CommodityOrderService;
import ua.service.CommodityService;
import ua.service.CommodityStatusService;
import ua.service.OrderStatusService;
import ua.service.ProducerService;
import ua.service.UserService;

public class Main {

    static BufferedReader br = new BufferedReader(new InputStreamReader(
	    System.in));

    static ConfigurableApplicationContext context = new ClassPathXmlApplicationContext(
	    "/META-INF/applicationContext.xml");
    static CategoryService categoryService = context
	    .getBean(CategoryService.class);
    static ProducerService producerService = context
	    .getBean(ProducerService.class);
    static CommodityStatusService commodityStatusService = context
	    .getBean(CommodityStatusService.class);
    static OrderStatusService orderStatusService = context
	    .getBean(OrderStatusService.class);
    static UserService userService = context.getBean(UserService.class);
    static CommodityService commodityService = context
	    .getBean(CommodityService.class);
    static CommodityOrderService commodityOrderService = context
	    .getBean(CommodityOrderService.class);

    public static void main(String[] args) throws IOException {
	boolean isRun = true;

	while (isRun) {
	    boolean isRunInternal = true;
	    System.out.println("Виберіть операцію:");
	    System.out.println("1. Робота з категоріями товарів");
	    System.out.println("2. Робота з виробниками товарів");
	    System.out.println("3. Робота з статусами товарів");
	    System.out.println("4. Робота з користувачами");
	    System.out.println("5. Робота з ордерами");
	    System.out.println("6. Робота з статусами ордерів");
	    System.out.println("7. Робота з товарами");
	    System.out.println("0. Вихід");
	    String choice = br.readLine();
	    switch (choice) {
	    case "1":
		while (isRunInternal) {
		    System.out.println("Категорії товарів. Виберіть операцію:");
		    System.out.println("1. Показати наявні категорії");
		    System.out.println("2. Додати категорію");
		    System.out.println("3. Показати товари по категорії");
		    System.out.println("4. Змінити категорію");
		    System.out.println("5. Видалити категорію");
		    System.out.println("0. Вихід в головне меню");
		    choice = br.readLine();
		    switch (choice) {
		    case "1":
			System.out
				.println("Зараз в базі є наступні категорії товарів:");
			for (Category category : categoryService.findAll())
			    System.out.println(category.getId() + " "
				    + category.getCategoryName());
			break;
		    case "2":
			System.out
				.println("Введіть назву категорії для додавання");
			categoryService.save(br.readLine());
			break;
		    case "3":
			System.out
				.println("Введіть назву категорії для пошуку товарів:");
			for (Commodity commodity : categoryService
				.findCommoditiesByCategory(br.readLine()))
			    System.out.println(commodity.getId() + " "
				    + commodity.getModel() + " "
				    + commodity.getPrice() + " "
				    + commodity.getQuantity() + " "
				    + commodity.getWarranty() + " "
				    + commodity.getCategory() + " "
				    + commodity.getCommodityStatus() + " "
				    + commodity.getProducer());
			break;
		    case "4":
			System.out
				.println("Введіть назву категорії для зміни:");
			String oldName = br.readLine();
			System.out.println("Введіть нову назву категорії:");
			String newName = br.readLine();
			categoryService.updateCategory(oldName, newName);
			break;
		    case "5":
			System.out
				.println("Введіть назву категорії для видалення:");
			categoryService.deleteByCategoryName(br.readLine());
			break;
		    case "0":
			isRunInternal = false;
			break;
		    }
		}
		break;
	    case "2":
		while (isRunInternal) {
		    System.out.println("Виробники товарів. Виберіть операцію:");
		    System.out.println("1. Показати наявних виробників");
		    System.out.println("2. Додати виробника");
		    System.out.println("3. Показати товари по виробнику");
		    System.out.println("4. Змінити виробника");
		    System.out.println("5. Видалити виробника");
		    System.out.println("0. Вихід в головне меню");
		    choice = br.readLine();
		    switch (choice) {
		    case "1":
			System.out
				.println("Зараз в базі є наступні виробники товарів:");
			for (Producer producer : producerService.findAll())
			    System.out.println(producer.getId() + " "
				    + producer.getProducerName());
			break;
		    case "2":
			System.out
				.println("Введіть назву виробника для додавання");
			producerService.save(br.readLine());
			break;
		    case "3":
			System.out
				.println("Введіть назву виробника для пошуку товарів:");
			for (Commodity commodity : producerService
				.findCommoditiesByProducer(br.readLine()))
			    System.out.println(commodity.getId() + " "
				    + commodity.getModel() + " "
				    + commodity.getPrice() + " "
				    + commodity.getQuantity() + " "
				    + commodity.getWarranty() + " "
				    + commodity.getCategory() + " "
				    + commodity.getCommodityStatus() + " "
				    + commodity.getProducer());
			break;
		    case "4":
			System.out
				.println("Введіть назву виробника для зміни:");
			String oldName = br.readLine();
			System.out.println("Введіть нову назву виробника:");
			String newName = br.readLine();
			producerService.updateProducer(oldName, newName);
			break;
		    case "5":
			System.out
				.println("Введіть назву виробника для видалення:");
			producerService.deleteByProducerName(br.readLine());
			break;
		    case "0":
			isRunInternal = false;
			break;
		    }
		}
		break;
	    case "3":
		while (isRunInternal) {
		    System.out.println("Статуси товарів. Виберіть операцію:");
		    System.out.println("1. Показати наявні статуси товарів");
		    System.out.println("2. Додати статус товару");
		    System.out.println("3. Показати товари по статусу");
		    System.out.println("4. Змінити статус товару");
		    System.out.println("5. Видалити статус");
		    System.out.println("0. Вихід в головне меню");
		    choice = br.readLine();
		    switch (choice) {
		    case "1":
			System.out
				.println("Зараз в базі є наступні статуси товарів:");
			for (CommodityStatus commodityStatus : commodityStatusService
				.findAll())
			    System.out.println(commodityStatus.getId() + " "
				    + commodityStatus.getCommodityStatusName());
			break;
		    case "2":
			System.out
				.println("Введіть назву статусу для додавання");
			commodityStatusService.save(br.readLine());
			break;
		    case "3":
			System.out
				.println("Введіть назву статусу для пошуку товарів:");
			for (Commodity commodity : commodityStatusService
				.findCommoditiesByCommodityStatus(br.readLine()))
			    System.out.println(commodity.getId() + " "
				    + commodity.getModel() + " "
				    + commodity.getPrice() + " "
				    + commodity.getQuantity() + " "
				    + commodity.getWarranty() + " "
				    + commodity.getCategory() + " "
				    + commodity.getCommodityStatus() + " "
				    + commodity.getProducer());
			break;
		    case "4":
			System.out.println("Введіть назву статусу для зміни:");
			String oldName = br.readLine();
			System.out.println("Введіть нову назву статусу:");
			String newName = br.readLine();
			commodityStatusService.updateCommodityStatus(oldName,
				newName);
			break;
		    case "5":
			System.out
				.println("Введіть назву статусу для видалення:");
			commodityStatusService.deleteByCommodityStatusName(br
				.readLine());
			break;
		    case "0":
			isRunInternal = false;
			break;
		    }
		}
		break;
	    case "4":
		while (isRunInternal) {
		    System.out.println("Користувачі. Виберіть операцію:");
		    System.out.println("1. Показати наявних користувачів");
		    System.out.println("2. Додати нового користувача");
		    System.out.println("3. Показати ордери користувача");
		    System.out.println("4. Змінити дані користувача");
		    System.out.println("5. Видалити користувача");
		    System.out.println("0. Вихід в головне меню");
		    choice = br.readLine();
		    switch (choice) {
		    case "1":
			System.out
				.println("Зараз в базі є наступні користувачі:");
			for (User user : userService.findAll())
			    System.out.println(user.getId() + " "
				    + user.getFullName() + " "
				    + user.getLogin() + " "
				    + user.getPassword() + " " + user.getMail()
				    + " " + user.getPhone() + " "
				    + user.getAddress());
			break;
		    case "2":
			System.out
				.println("Введіть дані користувача для додавання");
			System.out.println("Введіть ПІБ користува");
			String fullName = br.readLine();
			System.out.println("Введіть логін користувача");
			String login = br.readLine();
			System.out.println("Введіть пароль користувача");
			String password = br.readLine();
			System.out
				.println("Введіть електронну пошту користувача");
			String mail = br.readLine();
			System.out.println("Введіть телефон користувача");
			String phone = br.readLine();
			System.out.println("Введіть адресу користувача");
			String address = br.readLine();
			User newUser = new User(fullName, login, password,
				mail, phone, address);
			userService.save(newUser);
			break;
		    case "3":
			System.out
				.println("Введіть ПІБ користувача для пошуку ордерів:");
			for (CommodityOrder commodityOrder : userService
				.findCommodityOrdersByUser(br.readLine()))
			    System.out.println(commodityOrder.getId() + " "
				    + commodityOrder.getUser() + " "
				    + commodityOrder.getSum() + " "
				    + commodityOrder.getOrderDate() + " "
				    + commodityOrder.getPayDate() + " "
				    + commodityOrder.getDeliveryDate() + " "
				    + commodityOrder.getOrderStatus() + " "
				    + commodityOrder.getCommodities());
			break;
		    case "4":
			System.out
				.println("Введіть ПІБ користувача для зміни:");
			String oldName = br.readLine();
			System.out.println("Введіть нові дані користувача:");
			System.out
				.println("(залиште поле порожнім якщо дані міняти не потрібно)");
			System.out.println("Введіть ПІБ користува");
			fullName = br.readLine();
			System.out.println("Введіть логін користувача");
			login = br.readLine();
			System.out.println("Введіть пароль користувача");
			password = br.readLine();
			System.out
				.println("Введіть електронну пошту користувача");
			mail = br.readLine();
			System.out.println("Введіть телефон користувача");
			phone = br.readLine();
			System.out.println("Введіть адресу користувача");
			address = br.readLine();
			newUser = new User(fullName, login, password, mail,
				phone, address);
			userService.updateUser(oldName, newUser);
			break;
		    case "5":
			System.out
				.println("Введіть ПІБ користувача для видалення:");
			userService.deleteByUserFullName(br.readLine());
			break;
		    case "0":
			isRunInternal = false;
			break;
		    }
		}
		break;
	    case "5":
		while (isRunInternal) {
		    System.out.println("Ордери. Виберіть операцію:");
		    System.out.println("1. Показати наявні ордери");
		    System.out.println("2. Додати новий ордер");
		    System.out.println("3. Показати товари в даниму ордері");
		    System.out.println("4. Змінити статус та дати ордеру");
		    System.out.println("5. Видалити ордер");
		    System.out.println("0. Вихід в головне меню");
		    choice = br.readLine();
		    switch (choice) {
		    case "1":
			System.out.println("Зараз в базі є наступні ордери:");
			for (CommodityOrder commodityOrder : commodityOrderService
				.findAll())
			    System.out.println(commodityOrder.getId() + " "
				    + commodityOrder.getUser() + " "
				    + commodityOrder.getSum() + " "
				    + commodityOrder.getOrderDate() + " "
				    + commodityOrder.getPayDate() + " "
				    + commodityOrder.getDeliveryDate() + " "
				    + commodityOrder.getOrderStatus() + " "
				    + commodityOrder.getCommodities());
			break;
		    case "2":
			System.out.println("Введіть дані ордеру для додавання");
			System.out.println("Введіть ПІБ користувача");
			String userName = br.readLine();
			System.out.println("Введіть статус ордеру");
			String orderStatusName = br.readLine();
			System.out
				.println("Введіть дату створення ордеру (формат 25.09.2015)");
			String orderDate = br.readLine();
			System.out
				.println("Введіть дату оплати ордеру (формат 25.09.2015)");
			String payDate = br.readLine();
			System.out
				.println("Введіть дату доставки ордеру (формат 25.09.2015)");
			String deliveryDate = br.readLine();
			System.out
				.println("Введіть перелік моделей товарів в ордері (exit для завершення)");
			List<String> commodityModels = new ArrayList<>();
			String str;
			do {
			    str = br.readLine();
			    if (!str.equals("exit") && !str.equals(""))
				commodityModels.add(str);
			} while (!str.equals("exit"));

			commodityOrderService.save(userName, orderStatusName,
				orderDate, payDate, deliveryDate,
				commodityModels);
			;
			break;
		    case "3":
			System.out
				.println("Введіть ID ордеру для пошуку товарів:");
			for (Commodity commodity : commodityOrderService
				.findCommoditiesByOrderID(br.readLine()))
			    System.out.println(commodity.getId() + " "
				    + commodity.getModel() + " "
				    + commodity.getPrice() + " "
				    + commodity.getQuantity() + " "
				    + commodity.getWarranty() + " "
				    + commodity.getCategory() + " "
				    + commodity.getCommodityStatus() + " "
				    + commodity.getProducer());
			break;
		    case "4":
			System.out
				.println("Введіть ID ордеру для зміни статусу та дат:");
			String orderID = br.readLine();
			System.out.println("Введіть нові дані ордеру:");
			System.out
				.println("(залиште поле порожнім якщо дані міняти не потрібно)");
			System.out.println("Введіть новий статус ордеру");
			orderStatusName = br.readLine();
			System.out.println("Введіть нову дату оплати");
			payDate = br.readLine();
			System.out.println("Введіть нову дату доставки");
			deliveryDate = br.readLine();
			commodityOrderService.updateCommodityOrder(orderID,
				orderStatusName, payDate, deliveryDate);
			break;
		    case "5":
			System.out.println("Введіть ID ордеру видалення:");
			commodityOrderService.deleteByOrderID(br.readLine());
			break;
		    case "0":
			isRunInternal = false;
			break;
		    }
		}
		break;
	    case "6":
		while (isRunInternal) {
		    System.out.println("Статуси ордерів. Виберіть операцію:");
		    System.out.println("1. Показати наявні статуси ордерів");
		    System.out.println("2. Додати статус ордерів");
		    System.out.println("3. Показати ордери по статусу");
		    System.out.println("4. Змінити статус ордеру");
		    System.out.println("5. Видалити статус");
		    System.out.println("0. Вихід в головне меню");
		    choice = br.readLine();
		    switch (choice) {
		    case "1":
			System.out
				.println("Зараз в базі є наступні статуси ордерів:");
			for (OrderStatus orderStatus : orderStatusService
				.findAll())
			    System.out.println(orderStatus.getId() + " "
				    + orderStatus.getOrderStatusName());
			break;
		    case "2":
			System.out
				.println("Введіть назву статусу для додавання");
			orderStatusService.save(br.readLine());
			break;
		    case "3":
			System.out
				.println("Введіть назву статусу для пошуку ордерів:");
			for (CommodityOrder commodityOrder : orderStatusService
				.findCommodityOrdersByOrderStatus(br.readLine()))
			    System.out.println(commodityOrder.getId() + " "
				    + commodityOrder.getUser() + " "
				    + commodityOrder.getSum() + " "
				    + commodityOrder.getOrderDate() + " "
				    + commodityOrder.getPayDate() + " "
				    + commodityOrder.getDeliveryDate() + " "
				    + commodityOrder.getOrderStatus() + " "
				    + commodityOrder.getCommodities());
			break;
		    case "4":
			System.out.println("Введіть назву статусу для зміни:");
			String oldName = br.readLine();
			System.out.println("Введіть нову назву статусу:");
			String newName = br.readLine();
			orderStatusService.updateOrderStatus(oldName, newName);
			break;
		    case "5":
			System.out
				.println("Введіть назву статусу для видалення:");
			orderStatusService.deleteByOrderStatusName(br
				.readLine());
			break;
		    case "0":
			isRunInternal = false;
			break;
		    }
		}
		break;
	    case "7":
		while (isRunInternal) {
		    System.out.println("Товари. Виберіть операцію:");
		    System.out.println("1. Показати наявні товари");
		    System.out.println("2. Додати новий товар");
		    System.out.println("3. Показати ордери з даним товаром");
		    System.out.println("4. Змінити дані товару");
		    System.out.println("5. Видалити товар");
		    System.out.println("0. Вихід в головне меню");
		    choice = br.readLine();
		    switch (choice) {
		    case "1":
			System.out.println("Зараз в базі є наступні товари:");
			for (Commodity commodity : commodityService.findAll())
			    System.out.println(commodity.getId() + " "
				    + commodity.getModel() + " "
				    + commodity.getPrice() + " "
				    + commodity.getQuantity() + " "
				    + commodity.getWarranty() + " "
				    + commodity.getCategory() + " "
				    + commodity.getCommodityStatus() + " "
				    + commodity.getProducer());
			break;
		    case "2":
			System.out.println("Введіть дані товару для додавання");
			System.out.println("Введіть категорію товару");
			String categoryName = br.readLine();
			System.out.println("Введіть модель товару");
			String model = br.readLine();
			System.out.println("Введіть назву виробника");
			String producerName = br.readLine();
			System.out.println("Введіть кількість товару");
			int quantity = Integer.parseInt(br.readLine());
			System.out.println("Введіть ціну товару");
			double price = Double.parseDouble(br.readLine());
			System.out.println("Введіть статус товару");
			String statusName = br.readLine();
			System.out.println("Введіть гарантію на товар");
			int warranty = Integer.parseInt(br.readLine());
			commodityService.save(categoryName, model,
				producerName, quantity, price, statusName,
				warranty);
			break;
		    case "3":
			System.out
				.println("Введіть модель товару для пошуку ордерів:");
			for (CommodityOrder commodityOrder : commodityService
				.findCommodityOrdersByCommodityModel(br
					.readLine()))
			    System.out.println(commodityOrder.getId() + " "
				    + commodityOrder.getUser() + " "
				    + commodityOrder.getSum() + " "
				    + commodityOrder.getOrderDate() + " "
				    + commodityOrder.getPayDate() + " "
				    + commodityOrder.getDeliveryDate() + " "
				    + commodityOrder.getOrderStatus() + " "
				    + commodityOrder.getCommodities());
			break;
		    case "4":
			System.out.println("Введіть модель товару для зміни:");
			String commodityModel = br.readLine();
			System.out.println("Введіть нові дані товару:");
			System.out
				.println("(залиште поле порожнім якщо дані міняти не потрібно)");
			System.out.println("Введіть категорію товару");
			categoryName = br.readLine();
			System.out.println("Введіть модель товару");
			model = br.readLine();
			System.out.println("Введіть назву виробника");
			producerName = br.readLine();
			System.out.println("Введіть кількість товару");
			quantity = Integer.parseInt(br.readLine());
			System.out.println("Введіть ціну товару");
			price = Double.parseDouble(br.readLine());
			System.out.println("Введіть статус товару");
			statusName = br.readLine();
			System.out.println("Введіть гарантію на товар");
			warranty = Integer.parseInt(br.readLine());
			commodityService.updateCommodity(commodityModel,
				categoryName, model, producerName, quantity,
				price, statusName, warranty);
			break;
		    case "5":
			System.out
				.println("Введіть модель товару для видалення:");
			commodityService.deleteByCommodityModel(br.readLine());
			break;
		    case "0":
			isRunInternal = false;
			break;
		    }
		}
		break;
	    case "0":
		isRun = false;
		break;
	    }
	}
	context.close();

    }
}
